// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: booking/booking.proto

package bookingsV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookingsService_CreateBooking_FullMethodName    = "/bookings.BookingsService/CreateBooking"
	BookingsService_ConfirmBooking_FullMethodName   = "/bookings.BookingsService/ConfirmBooking"
	BookingsService_CancelBooking_FullMethodName    = "/bookings.BookingsService/CancelBooking"
	BookingsService_GetBooking_FullMethodName       = "/bookings.BookingsService/GetBooking"
	BookingsService_ListUserBookings_FullMethodName = "/bookings.BookingsService/ListUserBookings"
)

// BookingsServiceClient is the client API for BookingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingsServiceClient interface {
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingsResponse, error)
	ConfirmBooking(ctx context.Context, in *ConfirmBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	ListUserBookings(ctx context.Context, in *ListUserBookingsRequest, opts ...grpc.CallOption) (*ListUserBookingsReponse, error)
}

type bookingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingsServiceClient(cc grpc.ClientConnInterface) BookingsServiceClient {
	return &bookingsServiceClient{cc}
}

func (c *bookingsServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookingsResponse)
	err := c.cc.Invoke(ctx, BookingsService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) ConfirmBooking(ctx context.Context, in *ConfirmBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Booking)
	err := c.cc.Invoke(ctx, BookingsService_ConfirmBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Booking)
	err := c.cc.Invoke(ctx, BookingsService_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Booking)
	err := c.cc.Invoke(ctx, BookingsService_GetBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsServiceClient) ListUserBookings(ctx context.Context, in *ListUserBookingsRequest, opts ...grpc.CallOption) (*ListUserBookingsReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBookingsReponse)
	err := c.cc.Invoke(ctx, BookingsService_ListUserBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingsServiceServer is the server API for BookingsService service.
// All implementations must embed UnimplementedBookingsServiceServer
// for forward compatibility.
type BookingsServiceServer interface {
	CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingsResponse, error)
	ConfirmBooking(context.Context, *ConfirmBookingRequest) (*Booking, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*Booking, error)
	GetBooking(context.Context, *GetBookingRequest) (*Booking, error)
	ListUserBookings(context.Context, *ListUserBookingsRequest) (*ListUserBookingsReponse, error)
	mustEmbedUnimplementedBookingsServiceServer()
}

// UnimplementedBookingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookingsServiceServer struct{}

func (UnimplementedBookingsServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingsServiceServer) ConfirmBooking(context.Context, *ConfirmBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBooking not implemented")
}
func (UnimplementedBookingsServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedBookingsServiceServer) GetBooking(context.Context, *GetBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBookingsServiceServer) ListUserBookings(context.Context, *ListUserBookingsRequest) (*ListUserBookingsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBookings not implemented")
}
func (UnimplementedBookingsServiceServer) mustEmbedUnimplementedBookingsServiceServer() {}
func (UnimplementedBookingsServiceServer) testEmbeddedByValue()                         {}

// UnsafeBookingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingsServiceServer will
// result in compilation errors.
type UnsafeBookingsServiceServer interface {
	mustEmbedUnimplementedBookingsServiceServer()
}

func RegisterBookingsServiceServer(s grpc.ServiceRegistrar, srv BookingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookingsService_ServiceDesc, srv)
}

func _BookingsService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingsService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_ConfirmBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).ConfirmBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingsService_ConfirmBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).ConfirmBooking(ctx, req.(*ConfirmBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingsService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingsService_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).GetBooking(ctx, req.(*GetBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingsService_ListUserBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServiceServer).ListUserBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingsService_ListUserBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServiceServer).ListUserBookings(ctx, req.(*ListUserBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingsService_ServiceDesc is the grpc.ServiceDesc for BookingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookings.BookingsService",
	HandlerType: (*BookingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _BookingsService_CreateBooking_Handler,
		},
		{
			MethodName: "ConfirmBooking",
			Handler:    _BookingsService_ConfirmBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _BookingsService_CancelBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _BookingsService_GetBooking_Handler,
		},
		{
			MethodName: "ListUserBookings",
			Handler:    _BookingsService_ListUserBookings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking/booking.proto",
}
